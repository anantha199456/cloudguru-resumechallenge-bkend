# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

env:
  tf_version: '0.15.5'
  tf_working_dir: './setups'
  project: 'acg-etl'
  aws_region: 'us-east-2' 
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #aws-region: us-east-1
    
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7] 
    
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  
  terraform:
    name: 'Terraform'
    needs: build
    runs-on: ubuntu-latest
    env:
      project-home-directory: ./
    strategy:
      matrix:
        python-version: [3.7]
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        
      - name: 'AWS IAM Assume Role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # if you have/need it
          aws-region: us-east-2
          
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false

      - name: 'Terraform Plan'
        id: plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false

      - name: 'Set up Python 3.x'
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.9'

      - name: 'Package Libraries'
        if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        run: |
          python --version
          ls -la
          mkdir -p ~/cloud-resume/python/lib/python3.7/site-packages
          cd ~/cloud-resume/python/lib/python3.7/site-packages
          python3.7 -m pip install -r ~/work/cloudguru-resumechallenge-main/cloudguru-resumechallenge-main/requirements.txt  -t .
          zip -r python.zip .
          mv python.zip ~/work/cloudguru-resumechallenge-main/cloudguru-resumechallenge-main/setups/files_to_upload/
          ls -la ~/work/cloudguru-resumechallenge-main/cloudguru-resumechallenge-main/setups/files_to_upload/
      
      - name: 'Package App'
        run: |
          cd ~/work/cloudguru-resumechallenge-main/cloudguru-resumechallenge-main/
          zip -r counter.zip . -x ".*" "counter.py"
          mv counter.zip ./setup/files_to_upload/
          ls -la ./setup/files_to_upload/

      - name: 'Terraform Apply'
        if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
